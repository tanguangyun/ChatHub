#=====================================================================#
#                        ChatHub Configuration                        #
#                        ChatHub 配置
#=====================================================================#
# Please refer to the reference documentation for assistance          #
# 请参阅参考留档以获得帮助
# with configuring your ChatHub environment.                          #
# 配置您的ChatHub环境.
#                                                                     #
# https://www.librechat.ai/docs/configuration/dotenv                  #
#
# Librechat快速部署指南(聚合AI网站部署)
# https://www.gptacg.com/librechat-easy-deploy-guide
#=====================================================================#

#==================================================#
#               Server Configuration               #
#                   服务器配置
#==================================================#

HOST=localhost
# 主机=本地主机
PORT=3080
# 端口=3080

MONGO_URI=mongodb://127.0.0.1:27017/ChatHub
# 指定 MongoDB URI

DOMAIN_CLIENT=http://localhost:3080
# 指定客户端域
DOMAIN_SERVER=http://localhost:3080
# 指定服务器端域
# 如需要开启密码找回功能，以上改为:
# DOMAIN_CLIENT=你的访问url地址，如https://www.aaa.com
# DOMAIN_SERVER=你的访问url地址，如https://www.aaa.com
# 另外在下方注册和登录变量中设置 ALLOW_PASSWORD_RESET=true

NO_INDEX=true
# 防止公共搜索引擎将您的网站编入索引

#===============#
# JSON Logging  #
# JSON 日志记录
#===============#

# Use when process console logs in cloud deployment like GCP/AWS
# 当进程控制台登录GCP/AWS等云部署时使用
CONSOLE_JSON=false
# 启用适合 GCP/AWS 等云部署的详细 JSON 控制台/标准输出日志

#===============#
# Debug Logging #
# 调试日志
#===============#

DEBUG_LOGGING=true
# 保持调试日志处于活动状态
DEBUG_CONSOLE=false
# 启用与文件调试日志相同格式的详细控制台/标准输出日志

#=============#
# Permissions #
# 许可、权限
#=============#

# UID=1000
# 用户 ID
# GID=1000
# 组 ID

#===============#
# Configuration #
# 配置路径
#===============#
# Use an absolute path, a relative path, or a URL
# 使用绝对路径、相对路径或URL

# CONFIG_PATH="/alternative/path/to/librechat.yaml"
# ChatHub 配置文件的替代位置
# 如果您希望 ChatHub 在根目录中搜索配置文件(这是默认行为)，只需将此选项注释掉即可

#===================================================#
#                     Endpoints                     #
#                       端点
#===================================================#

# 在此部分中，您可以配置端点和模型选择、其 API 密钥以及支持它的端点的代理和反向代理设置
# 取消注释ENDPOINTS以自定义 ChatHub 中的可用端点

ENDPOINTS=openAI,anthropic,google,bingAI,gptPlugins,assistants
# 以逗号分隔的可用端点列表

# PROXY=
# 所有端点的代理设置
TITLE_CONVO=true
# 为所有端点启用标题

#===================================#
# Known Endpoints - librechat.yaml  #
# 已知端点 - librechat.yaml
#===================================#
# https://www.librechat.ai/docs/configuration/librechat_yaml/ai_endpoints

# ANYSCALE_API_KEY=
# Anyscale的API密钥
# APIPIE_API_KEY=
# Apipie的API密钥
# COHERE_API_KEY=
# Cohere的API密钥
# DATABRICKS_API_KEY=
# Databricks的API密钥
# FIREWORKS_API_KEY=
# Fireworks的API密钥
# GROQ_API_KEY=
# Groq的API密钥
# HUGGINGFACE_TOKEN=
# HuggingFace的API密钥
# MISTRAL_API_KEY=
# Mistral的API密钥
# OPENROUTER_KEY=
# OpenRouter的API密钥
# PERPLEXITY_API_KEY=
# Perplexity的API密钥
# SHUTTLEAI_API_KEY=
# ShuttleAI的API密钥
# TOGETHERAI_API_KEY=
# TogetherAI的API密钥

#============#
# Anthropic  #
#============#

ANTHROPIC_API_KEY=user_provided
# Anthropic的API密钥或“user_provided”允许用户提供自己的API密钥，留空以禁用此端点
# ANTHROPIC_MODELS=claude-3-5-sonnet-20240620,claude-3-opus-20240229,claude-3-sonnet-20240229,claude-3-haiku-20240307,claude-2.1,claude-2,claude-1.2,claude-1,claude-1-100k,claude-instant-1,claude-instant-1-100k
# 要使用Anthropic模型的逗号分隔列表
# ANTHROPIC_REVERSE_PROXY=
# Anthropic 的反向代理
# ANTHROPIC_TITLE_MODEL=claude-3-haiku-20240307
# 用于Anthropic所有权的模型

#============#
# Azure      #
#============#


# Note: these variables are DEPRECATED
# 注意：这些变量已弃用
# Use the `librechat.yaml` configuration for `azureOpenAI` instead
# You may also continue to use them if you opt out of using the `librechat.yaml` configuration

# AZURE_OPENAI_DEFAULT_MODEL=gpt-3.5-turbo # Deprecated
# AZURE_OPENAI_MODELS=gpt-3.5-turbo,gpt-4 # Deprecated
# AZURE_USE_MODEL_AS_DEPLOYMENT_NAME=TRUE # Deprecated
# AZURE_API_KEY= # Deprecated
# AZURE_OPENAI_API_INSTANCE_NAME= # Deprecated
# AZURE_OPENAI_API_DEPLOYMENT_NAME= # Deprecated
# AZURE_OPENAI_API_VERSION= # Deprecated
# AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME= # Deprecated
# AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME= # Deprecated
# PLUGINS_USE_AZURE="true" # Deprecated

#============#
# BingAI     #
#============#

BINGAI_TOKEN=user_provided
# Bing访问令牌，留空以禁用，可以设置为“user_provided”以允许用户从WebUI提供自己的令牌，留空以禁用此端点
# 注意：建议将其保留为“user_provided”并从WebUI提供令牌
# BINGAI_HOST=https://cn.bing.com
# Bing主机URL，保留注释以使用默认服务器

#============#
# Google     #
#============#

# 自定义可用的型号，用逗号分隔，不带空格，第一个将是默认的，将其留空或注释掉以使用内部设置

GOOGLE_KEY=user_provided
# Google API密钥，设置为“user_provided”以允许用户从WebUI提供自己的API密钥，留空以禁用此端点
# GOOGLE_REVERSE_PROXY=
# Google反向代理URL

# Gemini API
# GOOGLE_MODELS=gemini-1.5-flash-latest,gemini-1.0-pro,gemini-1.0-pro-001,gemini-1.0-pro-latest,gemini-1.0-pro-vision-latest,gemini-1.5-pro-latest,gemini-pro,gemini-pro-vision
# 可用的Gemini API Google模型，以逗号分隔

# Vertex AI
# GOOGLE_MODELS=gemini-1.5-flash-preview-0514,gemini-1.5-pro-preview-0514,gemini-1.0-pro-vision-001,gemini-1.0-pro-002,gemini-1.0-pro-001,gemini-pro-vision,gemini-1.0-pro
# 可用的Vertex AI Google模型，以逗号分隔

# GOOGLE_TITLE_MODEL=gemini-pro
# 用于通过Google进行标题的模型

# Google Gemini Safety Settings
# Google Gemini 安全设置
# NOTE (Vertex AI): You do not have access to the BLOCK_NONE setting by default.
# 注意(Vertex AI)：默认情况下，您无权访问BLOCK_NONE设置
# To use this restricted HarmBlockThreshold setting, you will need to either:
# 要使用此受限的HarmBlockThreshold设置，您需要：
#
# (a) Get access through an allowlist via your Google account team
# (a)通过您的Google帐户团队通过允许列表访问
# (b) Switch your account type to monthly invoiced billing following this instruction:
# (b)按照以下说明将您的帐户类型切换为每月开具发票的账单：
#     https://cloud.google.com/billing/docs/how-to/invoiced-billing
#
# GOOGLE_SAFETY_SEXUALLY_EXPLICIT=BLOCK_ONLY_HIGH
# 露骨色情内容的安全设置，选项包括 BLOCK_ALL、BLOCK_ONLY_HIGH、WARN_ONLY和OFF
# GOOGLE_SAFETY_HATE_SPEECH=BLOCK_ONLY_HIGH
# 仇恨言论内容的安全设置，选项包括 BLOCK_ALL、BLOCK_ONLY_HIGH、WARN_ONLY和OFF
# GOOGLE_SAFETY_HARASSMENT=BLOCK_ONLY_HIGH
# 骚扰内容的安全设置，选项包括 BLOCK_ALL、BLOCK_ONLY_HIGH、WARN_ONLY和OFF
# GOOGLE_SAFETY_DANGEROUS_CONTENT=BLOCK_ONLY_HIGH
# 危险内容的安全设置，选项包括 BLOCK_ALL、BLOCK_ONLY_HIGH、WARN_ONLY和OFF


#============#
# OpenAI     #
#============#

OPENAI_API_KEY=user_provided
# 您的OpenAI API密钥，留空以禁用此端点，或设置为“user_provided”以允许用户从WebUI提供自己的API密钥
# OPENAI_MODELS=gpt-4o,gpt-4o-mini,gpt-3.5-turbo-0125,gpt-3.5-turbo-0301,gpt-3.5-turbo,gpt-4,gpt-4-0613,gpt-4-vision-preview,gpt-3.5-turbo-0613,gpt-3.5-turbo-16k-0613,gpt-4-0125-preview,gpt-4-turbo-preview,gpt-4-1106-preview,gpt-3.5-turbo-1106,gpt-3.5-turbo-instruct,gpt-3.5-turbo-instruct-0914,gpt-3.5-turbo-16k
# 自定义可用模型，用逗号分隔，不带空格，第一个将是默认的，保留注释以使用内部设置

DEBUG_OPENAI=false
# 为OpenAI端点启用调试模式

# TITLE_CONVO=false
# OPENAI_TITLE_MODEL=gpt-3.5-turbo
# 用于OpenAI标题的模型

# OPENAI_SUMMARIZE=true
# 启用消息摘要
# OPENAI_SUMMARY_MODEL=gpt-3.5-turbo
# 用于 OpenAI 总结的模型

# OPENAI_FORCE_PROMPT=true
# 强制使用提示负载而不是消息负载来调用API

# OPENAI_REVERSE_PROXY=
# OpenAI的反向代理设置

# OPENAI_ORGANIZATION=
# 指定对OpenAI的每个API请求使用哪个组织

#====================#
#   Assistants API   #
#====================#

ASSISTANTS_API_KEY=user_provided
# 用于Assistant API的OpenAI API密钥，留空以禁用此端点，或设置为“user_provided”以允许用户从WebUI提供自己的API密钥
# ASSISTANTS_BASE_URL=
# Assistants API的备用基本URL
# ASSISTANTS_MODELS=gpt-4o,gpt-4o-mini,gpt-3.5-turbo-0125,gpt-3.5-turbo-16k-0613,gpt-3.5-turbo-16k,gpt-3.5-turbo,gpt-4,gpt-4-0314,gpt-4-32k-0314,gpt-4-0613,gpt-3.5-turbo-0613,gpt-3.5-turbo-1106,gpt-4-0125-preview,gpt-4-turbo-preview,gpt-4-1106-preview
# 自定义可用模型，用逗号分隔，不带空格，第一个将是默认的，留空以使用内部设置

#==========================#
#   Azure Assistants API   #
#==========================#

# Note: You should map your credentials with custom variables according to your Azure OpenAI Configuration
# 注意：您应该根据Azure OpenAI配置将凭据与自定义变量映射
# The models for Azure Assistants are also determined by your Azure OpenAI configuration.
# Azure助理的模型也由您的Azure OpenAI配置确定

# More info, including how to enable use of Assistants with Azure here:
# 更多信息，包括如何在此处启用Azure助手：
# https://www.librechat.ai/docs/configuration/librechat_yaml/ai_endpoints/azure#using-assistants-with-azure

#============#
# OpenRouter #
#============#
# !!!Warning: Use the variable above instead of this one. Using this one will override the OpenAI endpoint
# !!!警告：使用上面的变量而不是这个变量，使用这个将覆盖OpenAI端点
# OPENROUTER_API_KEY=

#============#
# Plugins    #
# 插件
#============#

# PLUGIN_MODELS=gpt-4o,gpt-4o-mini,gpt-4,gpt-4-turbo-preview,gpt-4-0125-preview,gpt-4-1106-preview,gpt-4-0613,gpt-3.5-turbo,gpt-3.5-turbo-0125,gpt-3.5-turbo-1106,gpt-3.5-turbo-0613
# 标识可用的型号，用逗号分隔，不带空格，列表中的第一个模型将被设置为默认模型，默认为内部设置

DEBUG_PLUGINS=true
# 设置为false以禁用插件的调试模式

# API密钥在注释掉或为空时通过webUI“user_provided”，不要将它们设置为“user_provided”，要么提供API密钥，要么将它们留空/注释掉
# 注意：如果之前配置过gptPlugins端点，请确保在ENDPOINTS环境变量中设置了它

# 为了安全地存储凭证，您需要固定密钥和IV，您可以在此处为生产和开发环境设置它们
# 警告：如果您不设置CREDS_KEY和CREDS_IV，应用程序将在启动时崩溃
CREDS_KEY=f34be427ebb29de8d88c107a71546019685ed8b241d8f2ed00c3df97ad2566f0
# 用于安全存储凭证的32字节密钥(64个十六进制字符)，应用程序启动时需要
CREDS_IV=e2341419ec3dd3d19b13a1a87fafcbfb
# 16字节IV(32个十六进制字符)用于安全存储凭证，应用程序启动时需要

# Azure AI Search
#-----------------
AZURE_AI_SEARCH_SERVICE_ENDPOINT=
# Azure AI搜索的服务终结点
AZURE_AI_SEARCH_INDEX_NAME=
# Azure AI搜索的索引名称
AZURE_AI_SEARCH_API_KEY=
# zure AI搜索的API密钥

AZURE_AI_SEARCH_API_VERSION=
# Azure AI搜索的API版本
AZURE_AI_SEARCH_SEARCH_OPTION_QUERY_TYPE=
# Azure AI搜索的查询类型
AZURE_AI_SEARCH_SEARCH_OPTION_TOP=
# Azure AI搜索的最高计数
AZURE_AI_SEARCH_SEARCH_OPTION_SELECT=
# Azure AI搜索的选择字段

# DALL·E
#----------------
# DALLE_API_KEY=
# DALL-E 2和DALL-E 3服务的OpenAI API密钥
# DALLE3_API_KEY=
# DALL-E 3的OpenAI API密钥
# DALLE2_API_KEY=
# DALL-E 2的OpenAI API密钥
# DALLE3_SYSTEM_PROMPT=
# 系统提示DALL-E 3
# DALLE2_SYSTEM_PROMPT=
# 系统提示DALL-E 2
# DALLE_REVERSE_PROXY=
# DALL-E API请求的反向代理URL
# DALLE3_BASEURL=
# DALL-E 3 API端点的基本URL，# DALLE3_BASEURL=https:// .openai.azure.com/openai/deployments/ /
# DALLE2_BASEURL=
# DALL-E 2 API端点的基本URL，# DALLE2_BASEURL=https:// .openai.azure.com/openai/deployments/ /

# DALL·E (via Azure OpenAI)
# DALL·E (通过Azure OpenAI)
# Note: requires some of the variables above to be set
# 注意：需要设置上面的一些变量
#----------------
# DALLE3_AZURE_API_VERSION=
# 具有Azure OpenAI服务的DALL-E 3的API版本，# 例如：2023-12-01-preview
# DALLE2_AZURE_API_VERSION=
# 具有Azure OpenAI服务的DALL-E 2的API版本，# 例如：2023-12-01-preview

# Google
#-----------------
GOOGLE_SEARCH_API_KEY=
# Google搜索API密钥
GOOGLE_CSE_ID=
# Google自定义搜索引擎ID

# SerpAPI
#-----------------
# 描述：SerpApi是一个实时API，用于访问Google搜索结果(性能不高)
SERPAPI_API_KEY=
# 您的SerpAPI API密钥

# Stable Diffusion
#-----------------
# 说明：本地安装使用http://127.0.0.1:7860使用http://host.docker.internal:7860
SD_WEBUI_URL=http://host.docker.internal:7860
# 稳定的扩散 Web UI URL

# Tavily
#-----------------
TAVILY_API_KEY=
# Tavily API密钥

# Traversaal
#-----------------
TRAVERSAAL_API_KEY=
# Traversaal API密钥

# WolframAlpha
#-----------------
WOLFRAM_APP_ID=
# Wolfram Alpha应用程序ID

# Zapier
#-----------------
ZAPIER_NLA_API_KEY=
# Zapier NLA API密钥

#==================================================#
#                      Search                      #
#                       搜索
#==================================================#

SEARCH=true
# 启用消息和对话中的搜索
MEILI_NO_ANALYTICS=true
# 禁用Meil​​iSearch的匿名遥测分析
MEILI_HOST=http://0.0.0.0:7700
# API服务器与搜索服务器的连接
MEILI_MASTER_KEY=DrhYf7zENyR6AlUCKmnz0eYASOQdl6zxH7s7MKFSfFCt
# Search的主密钥


#==================================================#
#          Speech to Text & Text to Speech         #
#               语音到文本和文本到语音
#==================================================#

STT_API_KEY=
TTS_API_KEY=

#===================================================#
#                    User System                    #
#                     用户系统
#===================================================#

#========================#
# Moderation             #
# 适度
#========================#

# 自动审核系统使用评分机制来跟踪用户违规行为

OPENAI_MODERATION=false
# 是否在OpenAI和Plugins端点上启用OpenAI审核
OPENAI_MODERATION_API_KEY=
# 您的OpenAI API密钥
# OPENAI_MODERATION_REVERSE_PROXY=
# 注意：默认情况下已注释掉，这不适用于所有反向代理

BAN_VIOLATIONS=true
# 是否启用禁止用户违规(他们仍将被记录)
BAN_DURATION=1000 * 60 * 60 * 2
# 用户和关联IP被禁止的时间(以毫秒为单位)
BAN_INTERVAL=20
# 每当用户的分数达到/超过间隔阈值时，用户将被禁止

LOGIN_VIOLATION_SCORE=1
# 对登录违规行为进行评分
REGISTRATION_VIOLATION_SCORE=1
# 违规注册的记分
CONCURRENT_VIOLATION_SCORE=1
# 对并发违规行为进行评分
MESSAGE_VIOLATION_SCORE=1
# 对消息违规行为进行评分
NON_BROWSER_VIOLATION_SCORE=20
# 对非浏览器违规进行评分
# ILLEGAL_MODEL_REQ_SCORE=5
# 对非法模型请求进行评分

LOGIN_MAX=7
LOGIN_WINDOW=5
REGISTER_MAX=5
REGISTER_WINDOW=60

LIMIT_CONCURRENT_MESSAGES=true
# 是否限制用户每个请求可以发送的消息量
CONCURRENT_MESSAGE_MAX=2
# 用户每个请求可以发送的最大消息量

LIMIT_MESSAGE_IP=true
# 是否限制每个“MESSAGE_IP_WINDOW”IP可以发送的消息量
MESSAGE_IP_MAX=40
# 每个“MESSAGE_IP_WINDOW”IP可以发送的最大消息量
MESSAGE_IP_WINDOW=1
# 以分钟为单位，确定“MESSAGE_IP_MAX”消息的时间窗口

LIMIT_MESSAGE_USER=false
# 是否限制用户可以通过“MESSAGE_USER_WINDOW”发送的消息量
MESSAGE_USER_MAX=40
# 每个“MESSAGE_USER_WINDOW”用户可以发送的最大消息量
MESSAGE_USER_WINDOW=1
# 以分钟为单位，确定“MESSAGE_USER_MAX”消息的时间窗口

ILLEGAL_MODEL_REQ_SCORE=5

#========================#
# Balance                #
# 平衡
#========================#

CHECK_BALANCE=false
# 为OpenAI/Plugins端点启用令牌信用余额
# 运行npm run add-balance手动添加余额
# 您还可以指定要添加的电子邮件和令牌信用金额，例如：npm run add-balance example@example.com 1000
# 运行npm run list-balances列出每个用户的余额
# 注意：1000个积分=0.001 美元(1千美元)

#========================#
# Registration and Login #
# 注册和登录
#========================#

ALLOW_EMAIL_LOGIN=true
# 启用或禁用仅电子邮件登录
ALLOW_REGISTRATION=true
# 启用或禁用新用户的电子邮件注册
ALLOW_SOCIAL_LOGIN=false
# 允许用户通过各种社交网络连接到LibreChat
ALLOW_SOCIAL_REGISTRATION=false
# 启用或禁用使用各种社交网络注册新用户
ALLOW_PASSWORD_RESET=true
# 启用或禁用用户自行重置密码的功能
# ALLOW_ACCOUNT_DELETION=true # note: enabled by default if omitted/commented out
# 启用或禁用用户自行删除帐户的功能，如果省略/注释掉则默认启用
ALLOW_UNVERIFIED_EMAIL_LOGIN=false
# 设置为true以允许用户无需验证电子邮件地址即可登录，如果设置为false，用户将需要在登录前验证其电子邮件

# 提示：即使禁用注册，也可以使用npm run create-user将用户直接添加到数据库中，禁用注册后，您可以使用npm run delete-user email@domain.com删除用户

SESSION_EXPIRY=1000 * 60 * 15
# 会话到期时间
REFRESH_TOKEN_EXPIRY=(1000 * 60 * 60 * 24) * 7
# 刷新令牌过期时间

JWT_SECRET=16f8c0ef4a5d391b26034086c628469d3f9f497f08163ab9b40137092f2909ef
# JWT密钥
JWT_REFRESH_SECRET=eaa5191f2914e30b9387fd84e254e4ba6fc51b4654968a9b0803b456a54b8418
# JWT刷新密钥
# 您应该使用新的安全值，给出的示例是32字节密钥(64个十六进制字符)，使用此replit快速生成：https://www.librechat.ai/toolkit/creds_generator

# Discord
DISCORD_CLIENT_ID=
# 您的Discord客户端ID
DISCORD_CLIENT_SECRET=
# 您的Discord客户端密钥
DISCORD_CALLBACK_URL=/oauth/discord/callback
# Discord身份验证的回调URL

# Facebook
FACEBOOK_CLIENT_ID=
# 您的Facebook客户端ID
FACEBOOK_CLIENT_SECRET=
# 您的Facebook客户端密钥
FACEBOOK_CALLBACK_URL=/oauth/facebook/callback
# Facebook身份验证的回调URL

# GitHub
GITHUB_CLIENT_ID=
# 您的GitHub客户端ID
GITHUB_CLIENT_SECRET=
# 您的GitHub客户端密钥
GITHUB_CALLBACK_URL=/oauth/github/callback
# GitHub身份验证的回调URL

# Google
GOOGLE_CLIENT_ID=
# 您的Google客户端ID
GOOGLE_CLIENT_SECRET=
# 您的Google客户端密钥
GOOGLE_CALLBACK_URL=/oauth/google/callback
# Google身份验证的回调URL

# OpenID
OPENID_CLIENT_ID=
# 您的OpenID客户端ID
OPENID_CLIENT_SECRET=
# 您的OpenID客户端密钥
OPENID_ISSUER=
# OpenID颁发者URL
OPENID_SESSION_SECRET=
# OpenID会话存储的密钥
OPENID_SCOPE="openid profile email"
# OpenID范围，OPENID_SCOPE="openid个人资料电子邮件"
OPENID_CALLBACK_URL=/oauth/openid/callback
# OpenID身份验证的回调URL
OPENID_REQUIRED_ROLE=
# 验证所需的角色
OPENID_REQUIRED_ROLE_TOKEN_KIND=
# 所需角色验证的令牌类型
OPENID_REQUIRED_ROLE_PARAMETER_PATH=
# 所需角色验证的参数路径

OPENID_BUTTON_LABEL=
# OpenID登录按钮的标签
OPENID_IMAGE_URL=
# OpenID登录按钮图像的URL

# LDAP
LDAP_URL=
# LDAP服务器URL
LDAP_BIND_DN=
# 绑定DN
LDAP_BIND_CREDENTIALS=
# 绑定DN的密码
LDAP_USER_SEARCH_BASE=
# 用户搜索库
LDAP_SEARCH_FILTER=mail={{username}}
# 搜索过滤器
LDAP_CA_CERT_PATH=
# CA证书路径
# LDAP_ID=
# LDAP_USERNAME=
# LDAP_FULL_NAME=

#========================#
# Email Password Reset   #
#   电子邮件重置密码
#========================#

# 电子邮件用于帐户验证和密码重置，请参阅：https://www.librechat.ai/docs/configuration/authentication/email

EMAIL_SERVICE=
# 电子邮件服务(例如 Gmail、Outlook)
EMAIL_HOST=
# 邮件服务器主机
EMAIL_PORT=25
# 邮件服务器端口
EMAIL_ENCRYPTION=
# 加密方法(starttls、tls等)
EMAIL_ENCRYPTION_HOSTNAME=
# 用于加密的主机名
EMAIL_ALLOW_SELFSIGNED=
# 允许自签名证书
EMAIL_USERNAME=
# 用于身份验证的用户名
EMAIL_PASSWORD=
# 用于身份验证的密码
EMAIL_FROM_NAME=
# 来自名字
EMAIL_FROM=noreply@librechat.ai
# 来自电子邮件地址

#========================#
# Firebase CDN           #
#========================#

# 如果您使用Firebase作为文件存储策略，请确保在librechat.yaml配置文件中将file_strategy选项设置为firebase
# 有关配置librechat.yaml文件的更多信息，请参阅YAML配置指南：自定义端点和配置 https://www.librechat.ai/docs/configuration/librechat_yaml

FIREBASE_API_KEY=
# 您的Firebase项目的API密钥
FIREBASE_AUTH_DOMAIN=
# 您的项目的Firebase Auth域
FIREBASE_PROJECT_ID=
# 您的Firebase项目的ID
FIREBASE_STORAGE_BUCKET=
# 适合您项目的Firebase存储桶
FIREBASE_MESSAGING_SENDER_ID=
# Firebase云消息发送者ID
FIREBASE_APP_ID=
# 您的项目的Firebase应用ID

#========================#
# Shared Links           #
# 共享链接
#========================#

ALLOW_SHARED_LINKS=true
ALLOW_SHARED_LINKS_PUBLIC=true

#===================================================#
#                        UI                         #
#                      用户界面
#===================================================#

APP_TITLE=ChatHub
# 应用程序标题
CUSTOM_FOOTER=
# 自定义页脚，取消注释并将CUSTOM_FOOTER留空以删除页脚
HELP_AND_FAQ_URL=/
# 帮助和常见问题解答URL，如果为空或已注释，则启用该按钮，设置为/，则该按钮被禁用

# SHOW_BIRTHDAY_ICON=true
# 2月11日显示LibreChat生日帽图标，设置为false以禁用生日帽

# Google tag manager id
#ANALYTICS_GTM_ID=user provided google tag manager id
# Google跟踪代码管理器ID

#==================================================#
#                      Others                      #
#==================================================#
#   You should leave the following commented out   #

# 重要提示：如果使用Redis，您应该在更改任何ChatHub设置后刷新缓存

# NODE_ENV=

# REDIS_URI=
# Redis URI
# USE_REDIS=
# 使用Redis

# E2E_USER_EMAIL=
# E2E_USER_PASSWORD=

#==================================================#
#                      RAG                         #
#                    文档对话
#==================================================#
# 设置后可上传文档并支持任意模型的文档阅读分析，并基于文档内容回答你的问题

# RAG_OPENAI_BASEURL=https://api.juheai.top/v1
# RAG_OPENAI_API_KEY=sk-xxx
# EMBEDDINGS_MODEL=text-embedding-ada-002
